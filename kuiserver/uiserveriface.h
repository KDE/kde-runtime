/*
 * This file was generated by dbusidl2cpp version 0.3
 * when processing input file org.kde.KIO.UIServer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UISERVERIFACE_H_118991146333561
#define UISERVERIFACE_H_118991146333561

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.KIO.UIServer
 */
class OrgKdeKIOUIServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KIO.UIServer"; }

public:
    explicit OrgKdeKIOUIServerInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeKIOUIServerInterface();

public slots: // METHODS
    inline Q_ASYNC void canResume(int id, qulonglong offset)
    {
        call(NoWaitForReply, QLatin1String("canResume.it"), id, offset);
    }

    inline Q_ASYNC void copying(int id, const QString &from, const QString &to)
    {
        call(NoWaitForReply, QLatin1String("copying.iss"), id, from, to);
    }

    inline Q_ASYNC void creatingDir(int id, const QString &url)
    {
        call(NoWaitForReply, QLatin1String("creatingDir.is"), id, url);
    }

    inline Q_ASYNC void deleting(int id, const QString &url)
    {
        call(NoWaitForReply, QLatin1String("deleting.is"), id, url);
    }

    inline Q_ASYNC void infoMessage(int id, const QString &msg)
    {
        call(NoWaitForReply, QLatin1String("infoMessage.is"), id, msg);
    }

    inline Q_ASYNC void jobFinished(int id)
    {
        call(NoWaitForReply, QLatin1String("jobFinished.i"), id);
    }

    inline QDBusReply<int> messageBox(int id, int type, const QString &text, const QString &caption, const QString &buttonYes, const QString &buttonNo)
    {
        return call(QLatin1String("messageBox.iissss"), id, type, text, caption, buttonYes, buttonNo);
    }

    inline Q_ASYNC void mounting(int id, const QString &dev, const QString &point)
    {
        call(NoWaitForReply, QLatin1String("mounting.iss"), id, dev, point);
    }

    inline Q_ASYNC void moving(int id, const QString &from, const QString &to)
    {
        call(NoWaitForReply, QLatin1String("moving.iss"), id, from, to);
    }

    inline QDBusReply<int> newJob(const QString &appServiceName, bool showProgress)
    {
        return call(QLatin1String("newJob.sb"), appServiceName, showProgress);
    }

    inline Q_ASYNC void percent(int id, uint ipercent)
    {
        call(NoWaitForReply, QLatin1String("percent.iu"), id, ipercent);
    }

    inline Q_ASYNC void processedDirs(int id, uint dirs)
    {
        call(NoWaitForReply, QLatin1String("processedDirs.iu"), id, dirs);
    }

    inline Q_ASYNC void processedFiles(int id, uint files)
    {
        call(NoWaitForReply, QLatin1String("processedFiles.iu"), id, files);
    }

    inline Q_ASYNC void processedSize(int id, qulonglong size)
    {
        call(NoWaitForReply, QLatin1String("processedSize.it"), id, size);
    }

    inline QDBusReply<void> setJobVisible(int id, bool enable)
    {
        return call(QLatin1String("setJobVisible.ib"), id, enable);
    }

    inline QDBusReply<void> setListMode(bool enable)
    {
        return call(QLatin1String("setListMode.b"), enable);
    }

    inline QDBusReply<bool> showSSLCertDialog(const QString &host, const QStringList &certList, qlonglong mainwindow, bool &send, bool &save, QString &choice)
    {
        QDBusMessage reply = call(QLatin1String("showSSLCertDialog.sasx"), host, certList, mainwindow);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            send = qvariant_cast<bool>(reply.at(1));
            save = qvariant_cast<bool>(reply.at(2));
            choice = qvariant_cast<QString>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<bool> showSSLInfoDialog(const QString &url, const QVariantMap &data, qlonglong mainwindow, bool &send, bool &save, QString &choice)
    {
        QDBusMessage reply = call(QLatin1String("showSSLInfoDialog.sa{ss}x"), url, data, mainwindow);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            send = qvariant_cast<bool>(reply.at(1));
            save = qvariant_cast<bool>(reply.at(2));
            choice = qvariant_cast<QString>(reply.at(3));
        }
        return reply;
    }

    inline Q_ASYNC void speed(int id, uint bytesPerSecond)
    {
        call(NoWaitForReply, QLatin1String("speed.iu"), id, bytesPerSecond);
    }

    inline Q_ASYNC void stating(int id, const QString &url)
    {
        call(NoWaitForReply, QLatin1String("stating.is"), id, url);
    }

    inline Q_ASYNC void totalDirs(int id, uint dirs)
    {
        call(NoWaitForReply, QLatin1String("totalDirs.iu"), id, dirs);
    }

    inline Q_ASYNC void totalFiles(int id, uint files)
    {
        call(NoWaitForReply, QLatin1String("totalFiles.iu"), id, files);
    }

    inline Q_ASYNC void totalSize(int id, qulonglong size)
    {
        call(NoWaitForReply, QLatin1String("totalSize.it"), id, size);
    }

    inline Q_ASYNC void transferring(int id, const QString &url)
    {
        call(NoWaitForReply, QLatin1String("transferring.is"), id, url);
    }

    inline Q_ASYNC void unmounting(int id, const QString &point)
    {
        call(NoWaitForReply, QLatin1String("unmounting.is"), id, point);
    }

signals: // SIGNALS
};

namespace org {
  namespace kde {
    namespace KIO {
      typedef ::OrgKdeKIOUIServerInterface UIServer;
    }
  }
}
#endif
