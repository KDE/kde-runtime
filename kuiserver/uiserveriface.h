/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -m -p uiserveriface -- org.kde.KIO.UIServer.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UISERVERIFACE_H_288011151672317
#define UISERVERIFACE_H_288011151672317

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

// HAND_EDIT
typedef QMap<QString, QString> StringStringMap;
Q_DECLARE_METATYPE(StringStringMap)

/*
 * Proxy class for interface org.kde.KIO.UIServer
 */
class OrgKdeKIOUIServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KIO.UIServer"; }

public:
    OrgKdeKIOUIServerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeKIOUIServerInterface();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void canResume(int id, qulonglong offset)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(offset);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("canResume"), argumentList);
    }

    inline Q_NOREPLY void copying(int id, const QString &from, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(from) << qVariantFromValue(to);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("copying"), argumentList);
    }

    inline Q_NOREPLY void creatingDir(int id, const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(url);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("creatingDir"), argumentList);
    }

    inline Q_NOREPLY void deleting(int id, const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(url);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("deleting"), argumentList);
    }

    inline Q_NOREPLY void infoMessage(int id, const QString &msg)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(msg);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("infoMessage"), argumentList);
    }

    inline Q_NOREPLY void jobFinished(int id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("jobFinished"), argumentList);
    }

    inline QDBusReply<int> messageBox(int id, int type, const QString &text, const QString &caption, const QString &buttonYes, const QString &buttonNo)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(type) << qVariantFromValue(text) << qVariantFromValue(caption) << qVariantFromValue(buttonYes) << qVariantFromValue(buttonNo);
        return callWithArgumentList(QDBus::Block, QLatin1String("messageBox"), argumentList);
    }

    inline Q_NOREPLY void mounting(int id, const QString &dev, const QString &point)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(dev) << qVariantFromValue(point);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("mounting"), argumentList);
    }

    inline Q_NOREPLY void moving(int id, const QString &from, const QString &to)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(from) << qVariantFromValue(to);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("moving"), argumentList);
    }

    inline QDBusReply<int> newJob(const QString &appServiceName, bool showProgress)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(appServiceName) << qVariantFromValue(showProgress);
        return callWithArgumentList(QDBus::Block, QLatin1String("newJob"), argumentList);
    }

    inline Q_NOREPLY void percent(int id, uint ipercent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(ipercent);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("percent"), argumentList);
    }

    inline Q_NOREPLY void processedDirs(int id, uint dirs)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(dirs);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("processedDirs"), argumentList);
    }

    inline Q_NOREPLY void processedFiles(int id, uint files)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(files);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("processedFiles"), argumentList);
    }

    inline Q_NOREPLY void processedSize(int id, qulonglong size)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(size);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("processedSize"), argumentList);
    }

    inline QDBusReply<void> setJobVisible(int id, bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(enable);
        return callWithArgumentList(QDBus::Block, QLatin1String("setJobVisible"), argumentList);
    }

    inline QDBusReply<void> setListMode(bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(enable);
        return callWithArgumentList(QDBus::Block, QLatin1String("setListMode"), argumentList);
    }

    inline QDBusReply<bool> showSSLCertDialog(const QString &host, const QStringList &certList, qlonglong mainwindow, bool &send, bool &save, QString &choice)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(certList) << qVariantFromValue(mainwindow);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("showSSLCertDialog"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            send = qdbus_cast<bool>(reply.arguments().at(1));
            save = qdbus_cast<bool>(reply.arguments().at(2));
            choice = qdbus_cast<QString>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusReply<void> showSSLInfoDialog(const QString &url, const QMap<QString,QString> &data, qlonglong mainwindow)
    {
        // HAND_EDIT
        qRegisterMetaType<QMap<QString, QString> >();
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(data) << qVariantFromValue(mainwindow);
        return callWithArgumentList(QDBus::Block, QLatin1String("showSSLInfoDialog"), argumentList);
    }

    inline Q_NOREPLY void speed(int id, uint bytesPerSecond)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(bytesPerSecond);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("speed"), argumentList);
    }

    inline Q_NOREPLY void stating(int id, const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(url);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("stating"), argumentList);
    }

    inline Q_NOREPLY void totalDirs(int id, uint dirs)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(dirs);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("totalDirs"), argumentList);
    }

    inline Q_NOREPLY void totalFiles(int id, uint files)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(files);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("totalFiles"), argumentList);
    }

    inline Q_NOREPLY void totalSize(int id, qulonglong size)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(size);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("totalSize"), argumentList);
    }

    inline Q_NOREPLY void transferring(int id, const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(url);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("transferring"), argumentList);
    }

    inline Q_NOREPLY void unmounting(int id, const QString &point)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(id) << qVariantFromValue(point);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("unmounting"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    namespace KIO {
      typedef ::OrgKdeKIOUIServerInterface UIServer;
    }
  }
}
#endif
