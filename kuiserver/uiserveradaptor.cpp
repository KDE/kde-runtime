/*
 * This file was generated by dbusidl2cpp version 0.3
 * when processing input file org.kde.KIO.UIServer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "uiserveradaptor_p.h"
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include "uiserver.h"
using namespace KIO;

/*
 * Implementation of adaptor class UIServerAdaptor
 */

UIServerAdaptor::UIServerAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

UIServerAdaptor::~UIServerAdaptor()
{
    // destructor
}

void UIServerAdaptor::canResume(int id, qulonglong offset)
{
    // handle method call org.kde.KIO.UIServer.canResume

    static_cast<UIServer *>(object())->canResume(id, offset);
}

void UIServerAdaptor::copying(int id, const QString &from, const QString &to)
{
    // handle method call org.kde.KIO.UIServer.copying

    static_cast<UIServer *>(object())->copying(id, from, to);
}

void UIServerAdaptor::creatingDir(int id, const QString &url)
{
    // handle method call org.kde.KIO.UIServer.creatingDir

    static_cast<UIServer *>(object())->creatingDir(id, url);
}

void UIServerAdaptor::deleting(int id, const QString &url)
{
    // handle method call org.kde.KIO.UIServer.deleting

    static_cast<UIServer *>(object())->deleting(id, url);
}

void UIServerAdaptor::infoMessage(int id, const QString &msg)
{
    // handle method call org.kde.KIO.UIServer.infoMessage

    static_cast<UIServer *>(object())->infoMessage(id, msg);
}

void UIServerAdaptor::jobFinished(int id)
{
    // handle method call org.kde.KIO.UIServer.jobFinished

    static_cast<UIServer *>(object())->jobFinished(id);
}

int UIServerAdaptor::messageBox(int id, int type, const QString &text, const QString &caption, const QString &buttonYes, const QString &buttonNo)
{
    // handle method call org.kde.KIO.UIServer.messageBox
    int buttonCode;

    //buttonCode = static_cast<YourObjectType *>(object())->messageBox(id, type, text, caption, buttonYes, buttonNo);
    return buttonCode;
}

void UIServerAdaptor::mounting(int id, const QString &dev, const QString &point)
{
    // handle method call org.kde.KIO.UIServer.mounting

    static_cast<UIServer *>(object())->mounting(id, dev, point);
}

void UIServerAdaptor::moving(int id, const QString &from, const QString &to)
{
    // handle method call org.kde.KIO.UIServer.moving

    static_cast<UIServer *>(object())->moving(id, from, to);
}

int UIServerAdaptor::newJob(const QString &appServiceName, bool showProgress)
{
    // handle method call org.kde.KIO.UIServer.newJob
    int jobId;

    //jobId = static_cast<YourObjectType *>(object())->newJob(appServiceName, showProgress);
    return jobId;
}

void UIServerAdaptor::percent(int id, uint ipercent)
{
    // handle method call org.kde.KIO.UIServer.percent

    static_cast<UIServer *>(object())->percent(id, ipercent);
}

void UIServerAdaptor::processedDirs(int id, uint dirs)
{
    // handle method call org.kde.KIO.UIServer.processedDirs

    static_cast<UIServer *>(object())->processedDirs(id, dirs);
}

void UIServerAdaptor::processedFiles(int id, uint files)
{
    // handle method call org.kde.KIO.UIServer.processedFiles

    static_cast<UIServer *>(object())->processedFiles(id, files);
}

void UIServerAdaptor::processedSize(int id, qulonglong size)
{
    // handle method call org.kde.KIO.UIServer.processedSize

    static_cast<UIServer *>(object())->processedSize(id, size);
}

void UIServerAdaptor::setJobVisible(int id, bool enable)
{
    // handle method call org.kde.KIO.UIServer.setJobVisible

    static_cast<UIServer *>(object())->setJobVisible(id, enable);
}

void UIServerAdaptor::setListMode(bool enable)
{
    // handle method call org.kde.KIO.UIServer.setListMode

    static_cast<UIServer *>(object())->setListMode(enable);
}

bool UIServerAdaptor::showSSLCertDialog(const QString &host, const QStringList &certList, qlonglong mainwindow, bool &send, bool &save, QString &choice)
{
    // handle method call org.kde.KIO.UIServer.showSSLCertDialog
    bool ok;

    //ok = static_cast<YourObjectType *>(object())->showSSLCertDialog(host, certList, mainwindow, send, save, choice);
    return ok;
}

bool UIServerAdaptor::showSSLInfoDialog(const QString &url, const QVariantMap &data, qlonglong mainwindow, bool &send, bool &save, QString &choice)
{
    // handle method call org.kde.KIO.UIServer.showSSLInfoDialog
    bool ok;

    //ok = static_cast<YourObjectType *>(object())->showSSLInfoDialog(url, data, mainwindow, send, save, choice);
    return ok;
}

void UIServerAdaptor::speed(int id, uint bytesPerSecond)
{
    // handle method call org.kde.KIO.UIServer.speed

    static_cast<UIServer *>(object())->speed(id, bytesPerSecond);
}

void UIServerAdaptor::stating(int id, const QString &url)
{
    // handle method call org.kde.KIO.UIServer.stating

    static_cast<UIServer *>(object())->stating(id, url);
}

void UIServerAdaptor::totalDirs(int id, uint dirs)
{
    // handle method call org.kde.KIO.UIServer.totalDirs

    static_cast<UIServer *>(object())->totalDirs(id, dirs);
}

void UIServerAdaptor::totalFiles(int id, uint files)
{
    // handle method call org.kde.KIO.UIServer.totalFiles

    static_cast<UIServer *>(object())->totalFiles(id, files);
}

void UIServerAdaptor::totalSize(int id, qulonglong size)
{
    // handle method call org.kde.KIO.UIServer.totalSize

    static_cast<UIServer *>(object())->totalSize(id, size);
}

void UIServerAdaptor::transferring(int id, const QString &url)
{
    // handle method call org.kde.KIO.UIServer.transferring

    static_cast<UIServer *>(object())->transferring(id, url);
}

void UIServerAdaptor::unmounting(int id, const QString &point)
{
    // handle method call org.kde.KIO.UIServer.unmounting

    static_cast<UIServer *>(object())->unmounting(id, point);
}

#include "uiserveradaptor_p.moc"

