##Brainstorming
--------------

- Display the time of the crash
("I came back to the computer some time later and drkonqi was there.. 
when the application crashed? during the night?") (by sreich)

- Usability review and suggestions:
http://blogs.msdn.com/oldnewthing/archive/2003/09/01/54734.aspx (by Maciej)

- Hide backtrace from user (only show progress and backtrace status)??

- Search in backtrace (esp. for [KCrash Handler])
- Backtrace syntax highlighting (xml parser+ some qt/kde class ?)

--

##Other tasks
-------------

NO - Cache lsbrelease output and/or bugzilla platform ??
((This will lead to messy results after a distro upgrade))

- KCrash could send the current KCrash behaviour as a parameter to DrKonqi, so if the app behaviour is to auto-restart itself, the
Restart button could be hidden as it wont make sense. (plasma crashes)
(gkiagia rework on KCrash)

- Check strings (native english) of the DebugInstaller class
- Check strings (native english) of the Preview Report page

- Update "AboutBugReporting" guide to reflect the new workflow

- Option to "don't show DrKonqi for this(X) app"
- Option to avoid drkonqi at all (setting KDE_DEBUG=1), and GUI to renable it

#- Improve DuplicatesPage dialog: what if you want to pick more than one possibly duplicate?
   - Improve UI of the new feature implementation

#- Option to Attach the new crash information to an existing report (check username and backtraces?
to avoid mixed reports)
   - Implement a UI

- Ask for saving the report information to file when exiting the report assistant without reporting
( This is going to be done with the Drkonqi2.1 proposal to not close the main dialog on report)
Leave the main dialog on launching the reporting tool, but add some legends:
 "Reporting tool started for this crash"
 "You reported this crash already" (and remove the , "help KDE, report bug" messages)

- Custom usefulness values needed by application (ex. Amarok wants only perfect backtraces...)

- Check for plugins ? (example, if plasma crashes, which libs were loaded, which lib caused the crash)
This is useful to determine if some external plugin is involved
(I don't know if this is technically possible)
(cat /proc/PID/maps)
- Read and upload as attachment (cat /proc/PID/maps), memmap

- Application detection: ask for or detect specific things depending on application
   ie konqueror: url, plasma: plasmoids in use, kopete: protocol, etc.

#ToDiscuss/Improve
--------

- REVIEW criteria of minimum chars/words to use in the Title and Details fields

#Later
---------

- waiting for productName()->product/component mapping (custom cgi file at BKO)
[[ currently bugzillalib detects unexistent products to later use the "kde" product ]]
Update: local mappings file support already implemented.

#DONE
-------

##Bugzilla DrKonqi reports cleanup:
---
Wontfix: 143243, 179721, 185547
Invalid/NEEDSINFO: 182048-worksforme
Worksforme: 167911 (gdb bug?)
Needs research: 126073
---

---------

* Crashes on Shutdown:

https://bugs.kde.org/show_bug.cgi?id=126073 ->
**** Restore block shutdown/logout while DrKonqi window is up
(to catch crashes on shutdown)
- Config option to:
  - (default) Show a feedback indicator for a "automatically closing window" timer (and continue with shutdown)
  - non-default Block shutdown/logout completely, do not use a closing timer.

- Ask Seli for Session Management stuff (we need to ask from code if we are in the middle of a shutdown process)
- Use " unsetenv("SESSION_MANAGER");" again on main.cpp  (http://websvn.kde.org/trunk/kdebase/drkonqi/main.cpp?r1=408177&r2=408176&pathrev=408177)

- Startkde waiting for drkonqi to exit->
     # wait if there's any crashhandler shown
318          while dcop | grep -q ^drkonqi- ; do
319              sleep 5
320          done

"   while qdbus | grep "^[^w]*org.kde.drkonqi" > /dev/null ; do sleep 5; done  "
http://websvn.kde.org/trunk/kdebase/startkde?r1=408177&r2=408176&pathrev=408177

http://websvn.kde.org/?view=rev&revision=408177

bool KSessionManager::saveState     (   QSessionManager &        sm      )       [virtual]
void QApplication::saveState ( QSessionManager & manager ) 



