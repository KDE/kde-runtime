/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a datamanagementadaptor -c DataManagementAdaptor -m org.kde.nepomuk.DataManagement.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "datamanagementadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DataManagementAdaptor
 */

DataManagementAdaptor::DataManagementAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DataManagementAdaptor::~DataManagementAdaptor()
{
    // destructor
}

void DataManagementAdaptor::addProperty(const QString &resources, const QString &property, const QVariantList &values, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.addProperty
    QMetaObject::invokeMethod(parent(), "addProperty", Q_ARG(QString, resources), Q_ARG(QString, property), Q_ARG(QVariantList, values), Q_ARG(QString, app));
}

QString DataManagementAdaptor::createResource(const QStringList &types, const QString &label, const QString &description, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.createResource
    QString out0;
    QMetaObject::invokeMethod(parent(), "createResource", Q_RETURN_ARG(QString, out0), Q_ARG(QStringList, types), Q_ARG(QString, label), Q_ARG(QString, description), Q_ARG(QString, app));
    return out0;
}

Nepomuk::SimpleResourceGraph DataManagementAdaptor::describeResources(const QStringList &resources, bool includeSubResources)
{
    // handle method call org.kde.nepomuk.DataManagement.describeResources
    Nepomuk::SimpleResourceGraph out0;
    QMetaObject::invokeMethod(parent(), "describeResources", Q_RETURN_ARG(Nepomuk::SimpleResourceGraph, out0), Q_ARG(QStringList, resources), Q_ARG(bool, includeSubResources));
    return out0;
}

void DataManagementAdaptor::mergeResources(Nepomuk::SimpleResourceGraph resources, const QString &app, const QHash<QString, QVariant> &additionalMetadata)
{
    // handle method call org.kde.nepomuk.DataManagement.mergeResources
    QMetaObject::invokeMethod(parent(), "mergeResources", Q_ARG(Nepomuk::SimpleResourceGraph, resources), Q_ARG(QString, app), Q_ARG(QHash<QString, QVariant>, additionalMetadata));
}

void DataManagementAdaptor::removeDataByApplication(const QString &app, bool force)
{
    // handle method call org.kde.nepomuk.DataManagement.removeDataByApplication
    QMetaObject::invokeMethod(parent(), "removeDataByApplication", Q_ARG(QString, app), Q_ARG(bool, force));
}

void DataManagementAdaptor::removeDataByApplication(const QStringList &resources, const QString &app, bool force)
{
    // handle method call org.kde.nepomuk.DataManagement.removeDataByApplication
    QMetaObject::invokeMethod(parent(), "removeDataByApplication", Q_ARG(QStringList, resources), Q_ARG(QString, app), Q_ARG(bool, force));
}

void DataManagementAdaptor::removeProperties(const QStringList &resources, const QStringList &properties, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.removeProperties
    QMetaObject::invokeMethod(parent(), "removeProperties", Q_ARG(QStringList, resources), Q_ARG(QStringList, properties), Q_ARG(QString, app));
}

void DataManagementAdaptor::removePropertiesByApplication(const QStringList &resources, const QStringList &properties, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.removePropertiesByApplication
    QMetaObject::invokeMethod(parent(), "removePropertiesByApplication", Q_ARG(QStringList, resources), Q_ARG(QStringList, properties), Q_ARG(QString, app));
}

void DataManagementAdaptor::removeProperty(const QStringList &resources, const QString &property, const QVariantList &values, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.removeProperty
    QMetaObject::invokeMethod(parent(), "removeProperty", Q_ARG(QStringList, resources), Q_ARG(QString, property), Q_ARG(QVariantList, values), Q_ARG(QString, app));
}

void DataManagementAdaptor::removeResources(const QStringList &resources, const QString &app, bool force)
{
    // handle method call org.kde.nepomuk.DataManagement.removeResources
    QMetaObject::invokeMethod(parent(), "removeResources", Q_ARG(QStringList, resources), Q_ARG(QString, app), Q_ARG(bool, force));
}

void DataManagementAdaptor::setProperty(const QString &resources, const QString &property, const QVariantList &values, const QString &app)
{
    // handle method call org.kde.nepomuk.DataManagement.setProperty
    QMetaObject::invokeMethod(parent(), "setProperty", Q_ARG(QString, resources), Q_ARG(QString, property), Q_ARG(QVariantList, values), Q_ARG(QString, app));
}


#include "datamanagementadaptor.moc"
