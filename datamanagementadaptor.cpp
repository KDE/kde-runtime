/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a datamanagementadaptor -c DataManagementAdaptor -m org.kde.nepomuk.DataManagement.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "datamanagementadaptor.h"
#include "datamanagementmodel.h"

#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>


namespace {
inline QUrl decodeUrl(const QString& urlsString) {
    return QUrl::fromEncoded(urlsString.toAscii());
}

QList<QUrl> decodeUrls(const QStringList& urlStrings) {
    QList<QUrl> urls;
    Q_FOREACH(const QString& urlString, urlStrings) {
        urls << decodeUrl(urlString);
    }
    return urls;
}

inline QString encodeUrl(const QUrl& url) {
    return QString::fromAscii(url.toEncoded());
}
}

DataManagementAdaptor::DataManagementAdaptor(Nepomuk::DataManagementModel *parent)
    : QDBusAbstractAdaptor(parent),
      m_model(parent)
{
}

DataManagementAdaptor::~DataManagementAdaptor()
{
}

void DataManagementAdaptor::addProperty(const QStringList &resources, const QString &property, const QVariantList &values, const QString &app)
{
    m_model->addProperty(decodeUrls(resources), decodeUrl(property), values, app);
}

QString DataManagementAdaptor::createResource(const QStringList &types, const QString &label, const QString &description, const QString &app)
{
    return encodeUrl(m_model->createResource(decodeUrls(types), label, description, app));
}

Nepomuk::SimpleResourceGraph DataManagementAdaptor::describeResources(const QStringList &resources, bool includeSubResources)
{
    return m_model->describeResources(decodeUrls(resources), includeSubResources);
}

void DataManagementAdaptor::mergeResources(Nepomuk::SimpleResourceGraph resources, const QString &app, const QHash<QString, QVariant> &additionalMetadata)
{
    QHash<QUrl, QVariant> decodedMetaData;
    for(QHash<QString, QVariant>::const_iterator it = additionalMetadata.constBegin();
        it != additionalMetadata.constEnd(); ++it) {
        decodedMetaData.insert(decodeUrl(it.key()), it.value());
    }
    m_model->mergeResources(resources, app, decodedMetaData);
}

void DataManagementAdaptor::removeDataByApplication(const QString &app, bool force)
{
    m_model->removeDataByApplication(app, force);
}

void DataManagementAdaptor::removeDataByApplication(const QStringList &resources, const QString &app, bool force)
{
    m_model->removeDataByApplication(decodeUrls(resources), app, force);
}

void DataManagementAdaptor::removeProperties(const QStringList &resources, const QStringList &properties, const QString &app)
{
    m_model->removeProperties(decodeUrls(resources), decodeUrls(properties), app);
}

void DataManagementAdaptor::removePropertiesByApplication(const QStringList &resources, const QStringList &properties, const QString &app)
{
    m_model->removePropertiesByApplication(decodeUrls(resources), decodeUrls(properties), app);
}

void DataManagementAdaptor::removeProperty(const QStringList &resources, const QString &property, const QVariantList &values, const QString &app)
{
    m_model->removeProperty(decodeUrls(resources), decodeUrl(property), values, app);
}

void DataManagementAdaptor::removeResources(const QStringList &resources, const QString &app, bool force)
{
    m_model->removeResources(decodeUrls(resources), app, force);
}

void DataManagementAdaptor::setProperty(const QStringList &resources, const QString &property, const QVariantList &values, const QString &app)
{
    m_model->setProperty(decodeUrls(resources), decodeUrl(property), values, app);
}

#include "datamanagementadaptor.moc"
