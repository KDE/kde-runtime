/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.MediaManager.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MEDIAMANAGERIFACE_H_89541149448352
#define MEDIAMANAGERIFACE_H_89541149448352

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.MediaManager
 */
class OrgKdeMediaManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.MediaManager"; }

public:
    explicit OrgKdeMediaManagerInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeMediaManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QStringList> fullList()
    {
        return call(QLatin1String("fullList"));
    }

    inline QDBusReply<QString> nameForLabel(const QString &label)
    {
        return call(QLatin1String("nameForLabel.s"), label);
    }

    inline QDBusReply<QStringList> properties(const QString &name)
    {
        return call(QLatin1String("properties.s"), name);
    }

    inline Q_ASYNC void reloadBackends()
    {
        call(NoWaitForReply, QLatin1String("reloadBackends"));
    }

    inline QDBusReply<bool> removableCamera(const QString &devNode)
    {
        return call(QLatin1String("removableCamera.s"), devNode);
    }

    inline QDBusReply<bool> removablePlug(const QString &devNode, const QString &label)
    {
        return call(QLatin1String("removablePlug.ss"), devNode, label);
    }

    inline QDBusReply<bool> removableUnplug(const QString &devNode)
    {
        return call(QLatin1String("removableUnplug.s"), devNode);
    }

    inline Q_ASYNC void setUserLabel(const QString &name, const QString &label)
    {
        call(NoWaitForReply, QLatin1String("setUserLabel.ss"), name, label);
    }

Q_SIGNALS: // SIGNALS
    void mediumAdded(const QString &name, bool allowNotification);
    void mediumChanged(const QString &name, bool allowNotification);
    void mediumRemoved(const QString &name, bool allowNotification);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeMediaManagerInterface MediaManager;
  }
}
#endif
