/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -- org.kde.MediaManager.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QDBUSXML2CPP_PROXY_283771151839293
#define QDBUSXML2CPP_PROXY_283771151839293

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.MediaManager
 */
class OrgKdeMediaManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.MediaManager"; }

public:
    OrgKdeMediaManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeMediaManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QStringList> fullList()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("fullList"), argumentList);
    }

    inline QDBusReply<QString> nameForLabel(const QString &label)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(label);
        return callWithArgumentList(QDBus::Block, QLatin1String("nameForLabel"), argumentList);
    }

    inline QDBusReply<QStringList> properties(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return callWithArgumentList(QDBus::Block, QLatin1String("properties"), argumentList);
    }

    inline Q_NOREPLY void reloadBackends()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("reloadBackends"), argumentList);
    }

    inline QDBusReply<bool> removableCamera(const QString &devNode)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(devNode);
        return callWithArgumentList(QDBus::Block, QLatin1String("removableCamera"), argumentList);
    }

    inline QDBusReply<bool> removablePlug(const QString &devNode, const QString &label)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(devNode) << qVariantFromValue(label);
        return callWithArgumentList(QDBus::Block, QLatin1String("removablePlug"), argumentList);
    }

    inline QDBusReply<bool> removableUnplug(const QString &devNode)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(devNode);
        return callWithArgumentList(QDBus::Block, QLatin1String("removableUnplug"), argumentList);
    }

    inline Q_NOREPLY void setUserLabel(const QString &name, const QString &label)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(label);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("setUserLabel"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void mediumAdded(const QString &name, bool allowNotification);
    void mediumChanged(const QString &name, bool allowNotification);
    void mediumRemoved(const QString &name, bool allowNotification);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeMediaManagerInterface MediaManager;
  }
}
#endif

