/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.MediaManager.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "mediamanageradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class MediaManagerAdaptor
 */

MediaManagerAdaptor::MediaManagerAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

MediaManagerAdaptor::~MediaManagerAdaptor()
{
    // destructor
}

QStringList MediaManagerAdaptor::fullList()
{
    // handle method call org.kde.MediaManager.fullList
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "fullList", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->fullList();
    return out0;
}

QString MediaManagerAdaptor::nameForLabel(const QString &label)
{
    // handle method call org.kde.MediaManager.nameForLabel
    QString out0;
    QMetaObject::invokeMethod(parent(), "nameForLabel", Q_RETURN_ARG(QString, out0), Q_ARG(QString, label));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->nameForLabel(label);
    return out0;
}

QStringList MediaManagerAdaptor::properties(const QString &name)
{
    // handle method call org.kde.MediaManager.properties
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "properties", Q_RETURN_ARG(QStringList, out0), Q_ARG(QString, name));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->properties(name);
    return out0;
}

void MediaManagerAdaptor::reloadBackends()
{
    // handle method call org.kde.MediaManager.reloadBackends
    QMetaObject::invokeMethod(parent(), "reloadBackends");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->reloadBackends();
}

bool MediaManagerAdaptor::removableCamera(const QString &devNode)
{
    // handle method call org.kde.MediaManager.removableCamera
    bool out0;
    QMetaObject::invokeMethod(parent(), "removableCamera", Q_RETURN_ARG(bool, out0), Q_ARG(QString, devNode));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->removableCamera(devNode);
    return out0;
}

bool MediaManagerAdaptor::removablePlug(const QString &devNode, const QString &label)
{
    // handle method call org.kde.MediaManager.removablePlug
    bool out0;
    QMetaObject::invokeMethod(parent(), "removablePlug", Q_RETURN_ARG(bool, out0), Q_ARG(QString, devNode), Q_ARG(QString, label));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->removablePlug(devNode, label);
    return out0;
}

bool MediaManagerAdaptor::removableUnplug(const QString &devNode)
{
    // handle method call org.kde.MediaManager.removableUnplug
    bool out0;
    QMetaObject::invokeMethod(parent(), "removableUnplug", Q_RETURN_ARG(bool, out0), Q_ARG(QString, devNode));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->removableUnplug(devNode);
    return out0;
}

void MediaManagerAdaptor::setUserLabel(const QString &name, const QString &label)
{
    // handle method call org.kde.MediaManager.setUserLabel
    QMetaObject::invokeMethod(parent(), "setUserLabel", Q_ARG(QString, name), Q_ARG(QString, label));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setUserLabel(name, label);
}


#include "mediamanageradaptor.moc"
