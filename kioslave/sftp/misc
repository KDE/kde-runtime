/** No descriptions */
void kio_sftpProtocol::slotReceivedStdout(int fd, int& len){
    kdDebug() << "kio_sftpProtocol::slotReceivedStdout()..." << endl;
    QByteArray packet;
    Q_UINT8 type;

    if( !getPacket(packet) ) {
        error(ERR_UNKNOWN, "Could not get sftp packet");
        return;
    }
    kdDebug(KIO_SFTP_DB) << "Received packet(" << packet.size() << "): [" << packet << "]" << endl;
    switch(type) {
        case SSH2_FXP_VERSION:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_VERSION packet" << endl;
            // XXX process version packet
            processVersion(packet);
            break;
        case SSH2_FXP_STATUS:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_STATUS packet" << endl;
            // XXX process status packet
            break;
        case SSH2_FXP_HANDLE:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_HANDLE packet" << endl;
            // XXX process handle packet
            break;
        case SSH2_FXP_DATA:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_DATA packet" << endl;
            // XXS process data packet
            break;
        case SSH2_FXP_NAME:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_NAME packet" << endl;
            // XXX process name packet
            break;
        case SSH2_FXP_ATTRS:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_ATTRS packet" << endl;
            // XXX process attrs packet
            break;
        case SSH2_FXP_EXTENDED:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_EXTENDED packet" << endl;
            // XXX  process extended packet
            // not supported
            break;
        case SSH2_FXP_EXTENDED_REPLY:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received SSH2_FXP_EXTENDED_REPLY packet" << endl;
            // not supported
            break;
        default:
            kdDebug(KIO_SFTP_DB) << "slotReceivedStdout(): Received UNKNOWN packet" << endl;
    }
}

/** Connect to SlaveBase::wroteStdin.
Sets the okWriteStdin flag. */
void kio_sftpProtocol::wroteStdinDone(KProcess * p){
    kdDebug(KIO_SFTP_DB) << "kio_sftpProtocol::wroteStdinDone()..." << endl;
//    okWriteStdin = true;
}

/** No descriptions */
void kio_sftpProtocol::processVersion(QByteArray& packet){
    QDataStream s(packet, IO_ReadOnly);
    Q_UINT8 type;
    Q_UINT32 ver;

    s >> type >> ver;

    if( type != mExpected ) {
        error(ERR_UNKNOWN, "SSH2_FXP_VERSION was not expected packet");
        return;
    }

    kdDebug(KIO_SFTP_DB) << "processVersion(): sftp version is " << ver << endl;
    if( ver != SSH2_FILEXFER_VERSION ) {
        error(ERR_UNKNOWN, "Incompatible sftp version");
        return;
    }

    mConnected = true;
}

/** No descriptions */
void kio_sftpProtocol::slotReceivedStdout(KProcess * p, char * b, int l){
    kdDebug() << "slotReceivedStdout()... buffer length=" << l << endl;
}
/** No descriptions */
void kio_sftpProtocol::slotReceivedStderr(KProcess * p, char* b, int l){
    kdDebug() << "slotReceivedStderr()... buffer length=" << l << endl;
}


