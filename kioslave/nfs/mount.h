/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef MOUNT_H_RPCGEN
#define MOUNT_H_RPCGEN

#include <rpc/rpc.h>

/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user or with the express written consent of
 * Sun Microsystems, Inc.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */
/*
 * Copyright (c) 1985, 1990 by Sun Microsystems, Inc.
 */

/* from @(#)mount.x	1.3 91/03/11 TIRPC 1.0 */
#ifndef _rpcsvc_mount_h
#define _rpcsvc_mount_h

#define MNTPATHLEN 1024
#define MNTNAMLEN 255
#define FHSIZE 32

typedef char fhandle[FHSIZE];

bool_t xdr_fhandle(XDR *, fhandle);

struct fhstatus
{
   u_int fhs_status;
   union
   {
      fhandle fhs_fhandle;
   } fhstatus_u;
};

bool_t xdr_fhstatus(XDR *, fhstatus*);

typedef char *dirpath;

bool_t xdr_dirpath(XDR *, dirpath*);

typedef char *name;

bool_t xdr_name(XDR *, name*);

typedef struct mountbody *mountlist;
bool_t xdr_mountlist(XDR *, mountlist*);


struct mountbody {
	name ml_hostname;
	dirpath ml_directory;
	mountlist ml_next;
};

bool_t xdr_mountbody(XDR *, mountbody*);

typedef struct groupnode *groups;
bool_t xdr_groups(XDR *, groups*);

struct groupnode
{
	name gr_name;
	groups gr_next;
};

bool_t xdr_groupnode(XDR *, groupnode*);

typedef struct exportnode *exports;
//bool_t xdr_exports(XDR *, exports*);
bool_t xdr_exports(XDR *, exportnode**);

struct exportnode
{
	dirpath ex_dir;
	groups ex_groups;
	exports ex_next;
};
bool_t xdr_exportnode(XDR *, exportnode*);

struct ppathcnf
{
	int pc_link_max;
	short pc_max_canon;
	short pc_max_input;
	short pc_name_max;
	short pc_path_max;
	short pc_pipe_buf;
	u_char pc_vdisable;
	char pc_xxx;
	short pc_mask[2];
};

bool_t xdr_ppathcnf(XDR *, ppathcnf*);

#endif /*!_rpcsvc_mount_h*/

#define NFSPROG ((u_long)100003)
#define NFSVERS ((u_long)2)
#define MOUNTPROG ((u_long)100005)
#define MOUNTVERS ((u_long)1)

#define MOUNTPROC_NULL ((u_long)0)
void * mountproc_null_1(void *, CLIENT *);
void * mountproc_null_1_svc(void *, struct svc_req *);
#define MOUNTPROC_MNT ((u_long)1)
fhstatus * mountproc_mnt_1(dirpath *, CLIENT *);
fhstatus * mountproc_mnt_1_svc(dirpath *, struct svc_req *);
#define MOUNTPROC_DUMP ((u_long)2)
mountlist * mountproc_dump_1(void *, CLIENT *);
mountlist * mountproc_dump_1_svc(void *, struct svc_req *);
#define MOUNTPROC_UMNT ((u_long)3)
void * mountproc_umnt_1(dirpath *, CLIENT *);
void * mountproc_umnt_1_svc(dirpath *, struct svc_req *);
#define MOUNTPROC_UMNTALL ((u_long)4)
void * mountproc_umntall_1(void *, CLIENT *);
void * mountproc_umntall_1_svc(void *, struct svc_req *);
#define MOUNTPROC_EXPORT ((u_long)5)
exports * mountproc_export_1(void *, CLIENT *);
exports * mountproc_export_1_svc(void *, struct svc_req *);
#define MOUNTPROC_EXPORTALL ((u_long)6)
exports * mountproc_exportall_1(void *, CLIENT *);
exports * mountproc_exportall_1_svc(void *, struct svc_req *);

#define MOUNTVERS_POSIX ((u_long)2)

void * mountproc_null_2(void *, CLIENT *);
void * mountproc_null_2_svc(void *, struct svc_req *);
fhstatus * mountproc_mnt_2(dirpath *, CLIENT *);
fhstatus * mountproc_mnt_2_svc(dirpath *, struct svc_req *);
mountlist * mountproc_dump_2(void *, CLIENT *);
mountlist * mountproc_dump_2_svc(void *, struct svc_req *);
void * mountproc_umnt_2(dirpath *, CLIENT *);
void * mountproc_umnt_2_svc(dirpath *, struct svc_req *);
void * mountproc_umntall_2(void *, CLIENT *);
void * mountproc_umntall_2_svc(void *, struct svc_req *);
exports * mountproc_export_2(void *, CLIENT *);
exports * mountproc_export_2_svc(void *, struct svc_req *);
exports * mountproc_exportall_2(void *, CLIENT *);
exports * mountproc_exportall_2_svc(void *, struct svc_req *);
#define MOUNTPROC_PATHCONF ((u_long)7)
ppathcnf * mountproc_pathconf_2(dirpath *, CLIENT *);
ppathcnf * mountproc_pathconf_2_svc(dirpath *, struct svc_req *);


#endif /* !_MOUNT_H_RPCGEN */
